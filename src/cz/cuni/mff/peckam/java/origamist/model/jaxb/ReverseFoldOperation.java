//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.04.14 at 11:59:50 odp. CEST 
//


package cz.cuni.mff.peckam.java.origamist.model.jaxb;

import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ReverseFoldOperation complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ReverseFoldOperation">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.mff.cuni.cz/~peckam/java/origamist/diagram/v2}ReverseFoldOperationBase">
 *       &lt;sequence>
 *         &lt;group ref="{http://www.mff.cuni.cz/~peckam/java/origamist/diagram/v2}line"/>
 *         &lt;group ref="{http://www.mff.cuni.cz/~peckam/java/origamist/diagram/v2}refLine"/>
 *         &lt;group ref="{http://www.mff.cuni.cz/~peckam/java/origamist/diagram/v2}layerList"/>
 *         &lt;sequence minOccurs="0">
 *           &lt;element name="oppositeLine" type="{http://www.mff.cuni.cz/~peckam/java/origamist/diagram/v2}Line2D"/>
 *           &lt;element name="oppositeLayer" type="{http://www.w3.org/2001/XMLSchema}int" maxOccurs="unbounded"/>
 *         &lt;/sequence>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ReverseFoldOperation", propOrder = {
    "line",
    "refLine",
    "layer",
    "oppositeLine",
    "oppositeLayer"
})
public class ReverseFoldOperation
    extends ReverseFoldOperationBase
    implements Equals, HashCode
{

    @XmlElement(type = Integer.class)
    protected List<Integer> layer = new cz.cuni.mff.peckam.java.origamist.utils.ObservableList<Integer>();
    @XmlElement(type = Integer.class)
    protected List<Integer> oppositeLayer = new cz.cuni.mff.peckam.java.origamist.utils.ObservableList<Integer>();
    @XmlElement(required = true, type = cz.cuni.mff.peckam.java.origamist.model.Line2D.class)
    protected cz.cuni.mff.peckam.java.origamist.model.Line2D line;
    @XmlElement(required = true, type = cz.cuni.mff.peckam.java.origamist.model.Line2D.class)
    protected cz.cuni.mff.peckam.java.origamist.model.Line2D refLine;
    @XmlElement(type = cz.cuni.mff.peckam.java.origamist.model.Line2D.class)
    protected cz.cuni.mff.peckam.java.origamist.model.Line2D oppositeLine;

    /**
     * Gets the value of the line property.
     * 
     * @return
     *     possible object is
     *     {@link cz.cuni.mff.peckam.java.origamist.model.jaxb.Line2D }
     *     
     */
    public cz.cuni.mff.peckam.java.origamist.model.Line2D getLine() {
        return line;
    }

    /**
     * Sets the value of the line property.
     * 
     * @param value
     *     allowed object is
     *     {@link cz.cuni.mff.peckam.java.origamist.model.jaxb.Line2D }
     *     
     */
    public void setLine(cz.cuni.mff.peckam.java.origamist.model.Line2D value) {
        this.line = value;
    }

    /**
     * Gets the value of the refLine property.
     * 
     * @return
     *     possible object is
     *     {@link cz.cuni.mff.peckam.java.origamist.model.jaxb.Line2D }
     *     
     */
    public cz.cuni.mff.peckam.java.origamist.model.Line2D getRefLine() {
        return refLine;
    }

    /**
     * Sets the value of the refLine property.
     * 
     * @param value
     *     allowed object is
     *     {@link cz.cuni.mff.peckam.java.origamist.model.jaxb.Line2D }
     *     
     */
    public void setRefLine(cz.cuni.mff.peckam.java.origamist.model.Line2D value) {
        this.refLine = value;
    }

    /**
     * Gets the value of the layer property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the layer property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLayer().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Integer }
     * 
     * 
     */
    public List<Integer> getLayer() {
        if (layer == null) {
            layer = new cz.cuni.mff.peckam.java.origamist.utils.ObservableList<Integer>();
        }
        return this.layer;
    }

    /**
     * Gets the value of the oppositeLine property.
     * 
     * @return
     *     possible object is
     *     {@link cz.cuni.mff.peckam.java.origamist.model.jaxb.Line2D }
     *     
     */
    public cz.cuni.mff.peckam.java.origamist.model.Line2D getOppositeLine() {
        return oppositeLine;
    }

    /**
     * Sets the value of the oppositeLine property.
     * 
     * @param value
     *     allowed object is
     *     {@link cz.cuni.mff.peckam.java.origamist.model.jaxb.Line2D }
     *     
     */
    public void setOppositeLine(cz.cuni.mff.peckam.java.origamist.model.Line2D value) {
        this.oppositeLine = value;
    }

    /**
     * Gets the value of the oppositeLayer property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the oppositeLayer property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOppositeLayer().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Integer }
     * 
     * 
     */
    public List<Integer> getOppositeLayer() {
        if (oppositeLayer == null) {
            oppositeLayer = new cz.cuni.mff.peckam.java.origamist.utils.ObservableList<Integer>();
        }
        return this.oppositeLayer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ReverseFoldOperation)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ReverseFoldOperation that = ((ReverseFoldOperation) object);
        {
            cz.cuni.mff.peckam.java.origamist.model.Line2D lhsLine;
            lhsLine = this.getLine();
            cz.cuni.mff.peckam.java.origamist.model.Line2D rhsLine;
            rhsLine = that.getLine();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "line", lhsLine), LocatorUtils.property(thatLocator, "line", rhsLine), lhsLine, rhsLine)) {
                return false;
            }
        }
        {
            cz.cuni.mff.peckam.java.origamist.model.Line2D lhsRefLine;
            lhsRefLine = this.getRefLine();
            cz.cuni.mff.peckam.java.origamist.model.Line2D rhsRefLine;
            rhsRefLine = that.getRefLine();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "refLine", lhsRefLine), LocatorUtils.property(thatLocator, "refLine", rhsRefLine), lhsRefLine, rhsRefLine)) {
                return false;
            }
        }
        {
            List<Integer> lhsLayer;
            lhsLayer = this.getLayer();
            List<Integer> rhsLayer;
            rhsLayer = that.getLayer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "layer", lhsLayer), LocatorUtils.property(thatLocator, "layer", rhsLayer), lhsLayer, rhsLayer)) {
                return false;
            }
        }
        {
            cz.cuni.mff.peckam.java.origamist.model.Line2D lhsOppositeLine;
            lhsOppositeLine = this.getOppositeLine();
            cz.cuni.mff.peckam.java.origamist.model.Line2D rhsOppositeLine;
            rhsOppositeLine = that.getOppositeLine();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "oppositeLine", lhsOppositeLine), LocatorUtils.property(thatLocator, "oppositeLine", rhsOppositeLine), lhsOppositeLine, rhsOppositeLine)) {
                return false;
            }
        }
        {
            List<Integer> lhsOppositeLayer;
            lhsOppositeLayer = this.getOppositeLayer();
            List<Integer> rhsOppositeLayer;
            rhsOppositeLayer = that.getOppositeLayer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "oppositeLayer", lhsOppositeLayer), LocatorUtils.property(thatLocator, "oppositeLayer", rhsOppositeLayer), lhsOppositeLayer, rhsOppositeLayer)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            cz.cuni.mff.peckam.java.origamist.model.Line2D theLine;
            theLine = this.getLine();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "line", theLine), currentHashCode, theLine);
        }
        {
            cz.cuni.mff.peckam.java.origamist.model.Line2D theRefLine;
            theRefLine = this.getRefLine();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refLine", theRefLine), currentHashCode, theRefLine);
        }
        {
            List<Integer> theLayer;
            theLayer = this.getLayer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "layer", theLayer), currentHashCode, theLayer);
        }
        {
            cz.cuni.mff.peckam.java.origamist.model.Line2D theOppositeLine;
            theOppositeLine = this.getOppositeLine();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "oppositeLine", theOppositeLine), currentHashCode, theOppositeLine);
        }
        {
            List<Integer> theOppositeLayer;
            theOppositeLayer = this.getOppositeLayer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "oppositeLayer", theOppositeLayer), currentHashCode, theOppositeLayer);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
