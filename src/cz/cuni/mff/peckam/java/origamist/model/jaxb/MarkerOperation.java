//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.05.13 at 02:43:54 dop. CEST 
//


package cz.cuni.mff.peckam.java.origamist.model.jaxb;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import org.w3._2001.xmlschema.Adapter1;


/**
 * <p>Provided property: text
 * <p>Provided property: refPoint
 * <p>Provided property: stepsToHide
 * <p>Java class for MarkerOperation complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MarkerOperation">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.mff.cuni.cz/~peckam/java/origamist/diagram/v2}MarkerOperationBase">
 *       &lt;sequence>
 *         &lt;element name="text" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;group ref="{http://www.mff.cuni.cz/~peckam/java/origamist/diagram/v2}refPoint"/>
 *         &lt;element name="stepsToHide" type="{http://www.w3.org/2001/XMLSchema}positiveInteger"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlType(name = "MarkerOperation", propOrder = {
    "text",
    "refPoint",
    "stepsToHide"
})
@XmlAccessorType(XmlAccessType.PROPERTY)
public class MarkerOperation
    extends MarkerOperationBase
    implements Equals, HashCode
{

    protected String text;
    /**
     * Property text
     * 
     */
    public final static String TEXT_PROPERTY = "text:cz.cuni.mff.peckam.java.origamist.model.jaxb.MarkerOperation";
    protected cz.cuni.mff.peckam.java.origamist.model.Point2D refPoint;
    /**
     * Property refPoint
     * 
     */
    public final static String REF_POINT_PROPERTY = "refPoint:cz.cuni.mff.peckam.java.origamist.model.jaxb.MarkerOperation";
    protected Integer stepsToHide;
    /**
     * Property stepsToHide
     * 
     */
    public final static String STEPS_TO_HIDE_PROPERTY = "stepsToHide:cz.cuni.mff.peckam.java.origamist.model.jaxb.MarkerOperation";

    public MarkerOperation() {
        if (getClass().getName().equals("cz.cuni.mff.peckam.java.origamist.model.MarkerOperation")) {
            init();
        }
    }

    /**
     * Gets the value of the text property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @XmlElement(required = true)
    public String getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setText(String value) {
        String old = this.text;
        this.text = value;
        if (((old!= value)&&((old == null)||(value == null)))||((old!= null)&&(!old.equals(value)))) {
            support.firePropertyChange(MarkerOperation.TEXT_PROPERTY, old, value);
        }
    }

    /**
     * Gets the value of the refPoint property.
     * 
     * @return
     *     possible object is
     *     {@link cz.cuni.mff.peckam.java.origamist.model.jaxb.Point2D }
     *     
     */
    @XmlElement(required = true, type = cz.cuni.mff.peckam.java.origamist.model.Point2D.class)
    public cz.cuni.mff.peckam.java.origamist.model.Point2D getRefPoint() {
        return refPoint;
    }

    /**
     * Sets the value of the refPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link cz.cuni.mff.peckam.java.origamist.model.jaxb.Point2D }
     *     
     */
    public void setRefPoint(cz.cuni.mff.peckam.java.origamist.model.Point2D value) {
        cz.cuni.mff.peckam.java.origamist.model.Point2D old = this.refPoint;
        this.refPoint = ((cz.cuni.mff.peckam.java.origamist.model.Point2D) value);
        if (((old!= value)&&((old == null)||(value == null)))||((old!= null)&&(!old.equals(value)))) {
            support.firePropertyChange(MarkerOperation.REF_POINT_PROPERTY, old, value);
        }
    }

    /**
     * Gets the value of the stepsToHide property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @XmlElement(required = true, type = String.class, defaultValue = "1")
    @XmlJavaTypeAdapter(Adapter1 .class)
    public Integer getStepsToHide() {
        return stepsToHide;
    }

    /**
     * Sets the value of the stepsToHide property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStepsToHide(Integer value) {
        Integer old = this.stepsToHide;
        this.stepsToHide = value;
        if (((old!= value)&&((old == null)||(value == null)))||((old!= null)&&(!old.equals(value)))) {
            support.firePropertyChange(MarkerOperation.STEPS_TO_HIDE_PROPERTY, old, value);
        }
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MarkerOperation)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MarkerOperation that = ((MarkerOperation) object);
        {
            String lhsText;
            lhsText = this.getText();
            String rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            cz.cuni.mff.peckam.java.origamist.model.Point2D lhsRefPoint;
            lhsRefPoint = this.getRefPoint();
            cz.cuni.mff.peckam.java.origamist.model.Point2D rhsRefPoint;
            rhsRefPoint = that.getRefPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "refPoint", lhsRefPoint), LocatorUtils.property(thatLocator, "refPoint", rhsRefPoint), lhsRefPoint, rhsRefPoint)) {
                return false;
            }
        }
        {
            Integer lhsStepsToHide;
            lhsStepsToHide = this.getStepsToHide();
            Integer rhsStepsToHide;
            rhsStepsToHide = that.getStepsToHide();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stepsToHide", lhsStepsToHide), LocatorUtils.property(thatLocator, "stepsToHide", rhsStepsToHide), lhsStepsToHide, rhsStepsToHide)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            cz.cuni.mff.peckam.java.origamist.model.Point2D theRefPoint;
            theRefPoint = this.getRefPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refPoint", theRefPoint), currentHashCode, theRefPoint);
        }
        {
            Integer theStepsToHide;
            theStepsToHide = this.getStepsToHide();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stepsToHide", theStepsToHide), currentHashCode, theStepsToHide);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
