This file contains a list of odd things I encountered during the development
of the Origamist project. It also contains workarounds or solutions to get rid
of these oddities.

------------

JTree disappears after some nodes are expanded:
http://forums.oracle.com/forums/thread.jspa?threadID=2131740&tstart=0

------------

The maximum and minimum sizes of a JScrollPane (and probably of most of Swing
components) are not taken into account by some Swing layout managers. You
must set the preferred size instead. If you only want to fix one dimension,
set the other dimension to 0.

-----------

Java3D needs some native libraries (.so or .dll files). They cannot be loaded
in the same way as JAR libraries. There are some ways to include them without
installation on the host computer on the web, but all of them have seemed to
be broken since JDK 1.6.0_20. So I had to write custom ClassLoader and use a
bootstrapping technique (Java3DBootstrappingApplet). The classloader loads
the native libraries from the specified path. It would be a big problem if I
tried to set the default classloader to the custom one (particulary it is IMHO
impossible for applets in a general way). So that's why the bootstrapping 
technique (the bootstrapper is loaded by the default CL and then it uses the
custom CL to load and instantiate my applet).

-----------

If you want to display custom tooltips for items in a JTree, you must call
setToolTipText("") on the JTree, or getToolTipText(MouseEvent event) won't
even be called!

-----------

Do you want a toolbar button with the down arrow on the right, which pops up
a submenu when clicked? No luck with Java SE classes! You must develop your
own. Some frameworks have these buttons, too (SwingX, Flamingo). If you don't
want to use a framework, then the best implementation is to be found at
mammothsoftware.com under LGPL, but that site doesn't exist this time, so you 
have to find it in an internet archive.

-----------

Some things about HTML+CSS in Swing components:
* look at http://download.oracle.com/javase/6/docs/api/javax/swing/text/html/CSS.html 
for the list of supported CSS properties... it's not as rich as it could
* border-style doesn't work (although the manual says it should) - can be 
simulated by a pair of surrounding <div>s
* padding and margin don't work on <span>s (and maybe on other inline tags)
* if you want to include an image, you must provide its URL using 
getClass().getResource("/path/to/the/image.jpg")
* for positioning the background image, don't mix text and numeric position
values; percentages don't work; 'bottom' doesn't work (but 'right' does)
* forget about 'em's... define everything in 'px'
* short colors, like #333, aren't interpreted correctly
* setting width and height of images in CSS doesn't work, but doing it in
the HTML attributes works

-----------

Changing the look of tooltips through all the application is painful. If
you wanted "to do it the Swing way", you would have to subclass all the
Swing components you use and you would have to override the createToolTip()
method in all of them. Much simpler (but with some constraints) seems to
set the tooltip as HTML and format it using CSS. You can make a single
factory that receives the tooltip's text and returns it formatted with HTML.

-----------

If you make .properties localization files with non-ASCII characters, you must
encode them as \uxxxx escape sequences. Ok. But if you make an error in the
sequence, the localization file is ignored AND no exception is thrown! Argh!
You can use native2ascii application (I think it is part of JDK) to convert
Unicode files to ISO-8859-1, which is the only allowed encoding for .properties
files. WHY??? I thought Java runs exclusively on Unicode. Nope. 

-----------

If you implement a MouseListener's mouseWheelRotated event, adding the created
listner with Component.addMouseListener() isn't sufficient. You must add it 
using Component.addMouseWheelListener().

-----------

Did you think that making a JNLP window running a JApplet resizable is funny? 
It isn't. But a (hacky) solution exists, see 
http://forums.oracle.com/forums/thread.jspa?threadID=2152885&stqc=true . 

-----------

Mouse events (and probably key events, too) are not delivered to JCanvas3D's 
Canvas3D by default. This results in mouse behaviors not working at all. It is
caused due to the fact, that a component's processMouseEvent() and similar 
methods are called only if the component has at least one listener of the type
or if the appropriate mask was set using the component's enableEvents() method.
Obviously, JCanvas3D doesn't add any own listeners, so the methods are not called
by default. One can fix it by calling

enableEvents(AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK
                        | AWTEvent.MOUSE_WHEEL_EVENT_MASK);
                        
on the component (note that this method is protected, so subclassing is needed).

As an "extra value" you lose all AWT events generated on the JCanvas3D, because it
seems to consume all the events even if it does no action in response to them. So
if you want a listener to be called on a containing component and its 
subcomponents, you also need to add these listeners to the JCanvas3D.

------------

If you want to have a hashtable of lines (Line3d or so), you must convert all the
lines to a canonical form. If you don't, equal lines with inverted direction 
vectors will be considered non-equal by the hashtable and so on. This is one
possible solution, and there is probably another one - writing an own hashtable,
which would compare the elements using epsilonEquals() and these functions would
compare the lines logically. But what would be the hashCode() of such lines?
I think I know - it would be the hashcode of the canonical line. 

But none of these two solutions solves the problem of lines differing by less than 
EPSILON. To solve this, one would think of some quantization of the space to 
2*EPSILON large pieces. But the "relation" defined on this space wouldn't be a
real relation, transitivity would be broken. So what to do with this???   