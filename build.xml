<?xml version="1.0" encoding="UTF-8"?>
<project name="origamist" default="default" basedir=".">
	<description>
            Origami diagram making application
    </description>
	
	<property name="path.to.latest.schema.common" value="src/resources/schemata/common_v1.xsd" />
	<property name="path.to.latest.schema.files" value="src/resources/schemata/files_v1.xsd" />
	<property name="path.to.latest.schema.diagram" value="src/resources/schemata/diagram_v2.xsd" />
	
	<!-- These properties are needed for the property-listener-injector XJC plugin. -->
	<property name="customPropertyChangeSupport.as.path" value="cz/cuni/mff/peckam/java/origamist/utils/CustomPropertyChangeSupport.java" />
	<property name="customPropertyChangeSupport.as.class" value="cz.cuni.mff.peckam.java.origamist.utils.CustomPropertyChangeSupport" />
	
	<!-- Whether to generate debugging symbols in compiled classes. -->
	<property name="debug" value="false" />
	
	<!-- Temporary directory into which XJC plugins will be built. -->
	<property name="plugin.bin" value="lib-compile-time/plugin-bin"/>
	
	<!-- Temporary directory into which will be put files needed to be compiled and referenced from XJC classpath --> 
	<!--property name="xjc.temp.dir" value="xjc-bin" /-->

	<taskdef name="xjc" classname="org.jvnet.jaxb2_commons.xjc.XJC2Task">
		<classpath>
			<fileset dir="lib-compile-time" includes="*.jar" />
			<!-- BEWARE: don't put "bin/" directory here - XJC doesn't like it (ExceptionInInitializerError)! 
			If you need to add some classes to XJC's classpath, copy them (compiled) to ${xjc.temp.dir} -->
			<!--pathelement path="${xjc.temp.dir}" /-->
		</classpath>
	</taskdef>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib-compile-time/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<taskdef classpath="lib-compile-time/orangevolt-ant-tasks-1.3.8.jar" resource="net/sf/ovanttasks/ovanttasks/taskdefs.properties" />

	<path id="project.classpath">
		<fileset dir="lib" includes="*.jar" />
	</path>

	<var name="signappletExecutable" value="signapplet.sh" />
	<if>
		<os family="windows" />
		<then>
			<var name="signappletExecutable" value="signapplet.bat" />
		</then>
	</if>

	<var name="browserExecutable" value="browser.sh" />
	<if>
		<os family="windows" />
		<then>
			<var name="browserExecutable" value="browser.bat" />
		</then>
	</if>

	<target depends="compile,jar,jar-sign,jnlp" description="Build whole project and its documentation." name="default" />

	<target name="clean">
		<delete dir="bin" />
	</target>

	<target name="init">
		<mkdir dir="bin" />
	</target>

    <macrodef name="xjc-plugin">
        <attribute name="includes" description="The string to put into javac's includes attribute; selects files that belong to the plugin." />
    	<attribute name="dotPluginFilename" description="Name of the file to be copied to META-INF/services/com.sun.tools.xjc.Plugin. Will be appended to @dotPluginDir." />
    	<attribute name="dotPluginDir" default="src/com/sun/tools/xjc/addon/" description="The directory containing @dotPluginFilename. Must be either empty or end with /" />
    	<attribute name="jarName" description="Name of the generated JAR (include the extension)." />
    	<attribute name="jarPath" default="lib-compile-time/" description="Path to the directory where to put the generated JAR. Must be either empty or end with /" />
        <sequential>
        	<mkdir dir="${plugin.bin}" />
        	<javac srcdir="src" destdir="${plugin.bin}" debug="${debug}" includes="@{includes}">
				<classpath>
					<pathelement path="src" />
					<fileset dir="lib-compile-time">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
			</javac>
			<mkdir dir="${plugin.bin}/META-INF" />
			<mkdir dir="${plugin.bin}/META-INF/services" />
			<copy file="@{dotPluginDir}@{dotPluginFilename}" tofile="${plugin.bin}/META-INF/services/com.sun.tools.xjc.Plugin" />
        	<copy includeemptydirs="false" todir="${plugin.bin}">
        		<fileset dir="src" includes="@{includes}" excludes="**/*.java" />
        	</copy>
			<jar destfile="@{jarPath}@{jarName}">
				<fileset dir="${plugin.bin}" includes="**/*.*" />
			</jar>
			<delete dir="${plugin.bin}" />
        </sequential>
    </macrodef>
	
	<target name="jaxb-implClass-plugin" depends="init">
		<xjc-plugin 
			includes="com/sun/tools/xjc/addon/PatchForImplClassAndList.java" 
			dotpluginfilename="PatchForImplClassAndList-com.sun.tools.xjc.Plugin" 
			jarname="xjc-patch-for-implClass-and-list.jar"/>
	</target>
	
	<target name="jaxb-property-access-plugin" depends="init">
		<xjc-plugin 
			includes="com/sun/tools/xjc/addon/PropertyAccessPlugin.java" 
			dotpluginfilename="PropertyAccessPlugin-com.sun.tools.xjc.Plugin" 
			jarname="xjc-property-access-plugin.jar"/>
	</target>

	<target name="jaxb-objFactoryCast-plugin" depends="init">
		<xjc-plugin 
			includes="com/sun/tools/xjc/addon/PatchForObjectFactoryUncheckedCastUsage.java" 
			dotpluginfilename="PatchForObjectFactoryUncheckedCastUsage-com.sun.tools.xjc.Plugin" 
			jarname="xjc-patch-for-objectFactory-unchecked-cast-usage.jar"/>
	</target>
	
	<target name="jaxb-propertyListenerInjector-plugin" depends="init">
		<xjc-plugin 
			includes="com/sun/tools/xjc/addon/property_listener_injector/*.*" 
			dotpluginfilename="PropertyListenerInjector-com.sun.tools.xjc.Plugin" 
			jarname="xjc-property-listener-injector.jar"/>
	</target>
	
	<target name="jaxb-enumerate-list-fields-plugin" depends="init">
		<xjc-plugin 
			includes="com/sun/tools/xjc/addon/EnumerateListFieldsPlugin.java" 
			dotpluginfilename="EnumerateListFieldsPlugin-com.sun.tools.xjc.Plugin" 
			jarname="xjc-enumerate-list-fields-plugin.jar"/>
	</target>
	
	<target name="jaxb-call-init-after-construct" depends="init">
		<xjc-plugin 
			includes="com/sun/tools/xjc/addon/CallInitAfterConstructPlugin.java" 
			dotpluginfilename="CallInitAfterConstructPlugin-com.sun.tools.xjc.Plugin" 
			jarname="xjc-call-init-after-construct-plugin.jar"/>
	</target>

	<target name="xjc-plugins" depends="jaxb-implClass-plugin,jaxb-objFactoryCast-plugin,jaxb-propertyListenerInjector-plugin,jaxb-property-access-plugin,jaxb-enumerate-list-fields-plugin,jaxb-call-init-after-construct" description="Compiles and packs XJC plugins.">
		<!--mkdir dir="${xjc.temp.dir}" /-->
		<!-- XJC needs the following file to be compiled on the path for the property-listener-injector plugin to work. -->
		<!--javac srcdir="src" destdir="${xjc.temp.dir}" debug="${debug}" includes="${customPropertyChangeSupport.as.path}">
			<classpath>
				<pathelement path="src" />
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac-->
	</target>
	
	<target name="xjc-plugins-cleanup">
		<!--delete dir="${xjc.temp.dir}" /-->
	</target>
	
	<presetdef name="xjc-make" description="A preset XJC schema compilation. Just specify the schema attribute and produces elements.">
		<xjc destdir="src" removeOldOutput="true">
			<arg value="-extension"/>
			<arg value="-Xenumerate-list-fields"/>
			<arg value="-Xenumerate-list-fields-generate-properties"/>
			<arg value="-Xenumerate-list-fields-enumerate-properties"/>
			<arg value="-Xpatch-implClass-list"/>
			<arg value="-Xpatch-objFactory-uncheckedCast"/>
			<arg value="-Xequals"/>
			<arg value="-XhashCode"/>
			<arg value="-Xproperty-access"/>
			<arg value="-Xcall-init-after-construct"/>
			<arg value="-Xinject-listener-code"/>
			<arg value="-Xinject-listener-code-interface-bound"/>
			<arg value="cz.cuni.mff.peckam.java.origamist.utils.HasBoundProperties"/>
			<arg value="-Xinject-listener-code-dont-generate-support"/>
		</xjc>
	</presetdef>
	
	<target name="jaxb-common" depends="xjc-plugins" description="Generates JAXB source files from common.xsd">
		<xjc-make schema="${path.to.latest.schema.common}">
			<produces dir="src/cz/cuni/mff/peckam/java/origamist/common/jaxb" includes="**/*" />
			<produces dir="src/org/w3/_2001/xmlschema" includes="**/*" />
		</xjc-make>
	</target>

	<target name="jaxb-files" depends="xjc-plugins" description="Generates JAXB source files from files.xsd">
		<xjc-make schema="${path.to.latest.schema.files}">
			<produces dir="src/cz/cuni/mff/peckam/java/origamist/files/jaxb" includes="**/*" />
		</xjc-make>
	</target>

	<target name="jaxb-diagram" depends="xjc-plugins" description="Generates JAXB source files from diagram.xsd">
		<xjc-make schema="${path.to.latest.schema.diagram}">
			<produces dir="src/cz/cuni/mff/peckam/java/origamist/model/jaxb" includes="**/*" />
		</xjc-make>
	</target>

	<target name="jaxb" description="Generates JAXB source files" depends="jaxb-common,jaxb-files,jaxb-diagram,xjc-plugins-cleanup" />

	<target name="compile" depends="init,jaxb" description="Compiles the application">
		<javac srcdir="src" destdir="bin" debug="${debug}" includes="**/*.java" excludes="com/sun/tools/xjc/addon/**/*.java,cz/cuni/mff/peckam/java/origamist/tests/**/*.java,cz/cuni/mff/peckam/java/origamist/unused/**/*.java">
			<classpath>
				<pathelement path="src" />
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="bin">
			<fileset dir="src">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.xsd" />
				<include name="resources/**/*.*" />
				<exclude name="cz/cuni/mff/peckam/java/origamist/unused/**/*.*" />
				<exclude name="cz/cuni/mff/peckam/java/origamist/tests/**/*.*" />
				<exclude name="net/sf/ovanttasks/ovanttasks/**/*.java" />
			</fileset>
		</copy>
	</target>

	<!-- TODO Linux support should be added. -->
	<macrodef name="killjava" description="Kills all running java processes to avoid JAR files being locked by eg. browser plugins.">
		<sequential>
			<if>
				<os name="windows"/>
				<then>
					<exec executable="taskkill">
						<arg value="/F" />
						<arg value="/IM" />
						<arg value="java.exe" />
					</exec>
				</then>
			</if>
		</sequential>
	</macrodef>
	
	<target name="jar" depends="compile" description="Makes JAR and signs it">
		<killjava />

		<pathconvert property="mf.classpath" pathsep=" ">
			<path refid="project.classpath" />
			<flattenmapper />
		</pathconvert>

		<jar destfile="OrigamistViewer.jar">
			<fileset dir="bin" includes="**/*.*" excludes="cz/cuni/mff/peckam/java/origamist/gui/editor/**/*.*,cz/cuni/mff/peckam/java/origamist/tests/**/*.java,cz/cuni/mff/peckam/java/origamist/unused/**/*.java" />
			<fileset file="LICENSE" />

			<manifest>
				<attribute name="Created-By" value="Martin Pecka" />
				<attribute name="Main-Class" value="cz.cuni.mff.peckam.java.origamist.gui.viewer.OrigamiViewerBootstrapper" />
				<attribute name="Class-Path" value="${mf.classpath}" />
			</manifest>

		</jar>

		<jar destfile="OrigamistEditor.jar">
			<fileset dir="bin" includes="**/*.*" excludes="cz/cuni/mff/peckam/java/origamist/gui/viewer/**/*.*,cz/cuni/mff/peckam/java/origamist/tests/**/*.java,cz/cuni/mff/peckam/java/origamist/unused/**/*.java" />
			<fileset file="LICENSE" />

			<manifest>
				<attribute name="Created-By" value="Martin Pecka" />
				<attribute name="Main-Class" value="cz.cuni.mff.peckam.java.origamist.gui.editor.OrigamiEditorBootstrapper" />
				<attribute name="Class-Path" value="${mf.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="jar-sign" depends="jar">
		<if>
			<available property="" file="${signappletExecutable}" />
			<then>
				<exec executable="${signappletExecutable}" dir=".">
					<arg value="OrigamistViewer.jar" />
				</exec>
				<exec executable="${signappletExecutable}" dir=".">
					<arg value="OrigamistEditor.jar" />
				</exec>
			</then>
			<else>
				<echo>Please create your ${signappletExecutable} file to sign the applets. Look in ${signappletExecutable}.example for example contents of that file.</echo>
			</else>
		</if>
	</target>

	<target name="jnlp" depends="jnlp-viewer,jnlp-editor" />

	<target name="jnlp-init">
		<input addproperty="jnlp.codebase" defaultvalue="file:/${basedir}" message="Enter the URI of the JNLP files codebase. Leave blank if you deploy the application onto your local machine."/>
	</target>
	
	<macrodef name="create-jnlp">
		<attribute name="jnlp-file" description="" />
		<attribute name="jar-file" description="" />
		<element name="additional" implicit="true" />
		<sequential>
			<jnlp href="@{jnlp-file}" tofile="@{jnlp-file}" codebase="${jnlp.codebase}">
				<additional />
				
				<security>
					<all_permissions />
				</security>

				<resources os="Windows">
					<property name="sun.java2d.noddraw" value="true" />
				</resources>

				<resources os="Mac OS X">
					<property name="j3d.rend" value="jogl" />
				</resources>

				<resources>
					<j2se href="http://java.sun.com/products/autodl/j2se" version="1.6+" max_heap_size="256m" initial_heap_size="128m" />
					<jar href="@{jar-file}" main="true" />
					<fileset dir="lib" includes="**/*.jar" />
				</resources>
			</jnlp>
		</sequential>
	</macrodef>
	
	<target name="jnlp-viewer" depends="jnlp-init">
		<create-jnlp jar-file="OrigamistViewer.jar" jnlp-file="origami_viewer.jnlp">
			<information>
				<title>Origamist viewer</title>
				<vendor>Martin Pecka</vendor>
				<homepage href="http://github.com/peci1/Origamist" />
				<description>A viewer for digital origami models.</description>
				<description kind="short">An origami viewer application.</description>
				<offline_allowed />
			</information>
			<applet_desc name="Origami viewer" main_class="cz.cuni.mff.peckam.java.origamist.gui.viewer.OrigamiViewerBootstrapper" documentBase="." width="800" height="600" />
		</create-jnlp>
	</target>

	<target name="jnlp-viewer-test" depends="jnlp-init">
		<create-jnlp jnlp-file="origami_viewer.test.jnlp" jar-file="OrigamistViewer.jar">
			<information>
				<title>Origamist viewer</title>
				<vendor>Martin Pecka</vendor>
				<homepage href="http://github.com/peci1/Origamist" />
				<description>A viewer for digital origami models.</description>
				<description kind="short">An origami viewer application.</description>
				<offline_allowed />
			</information>
			<applet_desc name="Origami viewer" main_class="cz.cuni.mff.peckam.java.origamist.gui.viewer.OrigamiViewerBootstrapper" documentBase="." width="800" height="600">
				<param name="files" value="diagrams/listing.xml" />
				<param name="displayMode" value="PAGE" />
			</applet_desc>
		</create-jnlp>
	</target>

	<target name="jnlp-editor" depends="jnlp-init">
		<create-jnlp jnlp-file="origami_editor.jnlp" jar-file="OrigamistEditor.jar">
			<information>
				<title>Origamist editor</title>
				<vendor>Martin Pecka</vendor>
				<homepage href="http://github.com/peci1/Origamist" />
				<description>An editor for digital origami models.</description>
				<description kind="short">An origami editor application.</description>
				<offline_allowed />
			</information>
			
			<applet_desc name="Origami editor" main_class="cz.cuni.mff.peckam.java.origamist.gui.editor.OrigamiEditorBootstrapper" documentBase="." width="1024" height="768" />
		</create-jnlp>
	</target>
	
	<target name="jnlp-editor-test" depends="jnlp-init">
		<create-jnlp jnlp-file="origami_editor.test.jnlp" jar-file="OrigamistEditor.jar">
			<information>
				<title>Origamist editor</title>
				<vendor>Martin Pecka</vendor>
				<homepage href="http://github.com/peci1/Origamist" />
				<description>An editor for digital origami models.</description>
				<description kind="short">An origami editor application.</description>
				<offline_allowed />
			</information>
			
			<applet_desc name="Origami editor" main_class="cz.cuni.mff.peckam.java.origamist.gui.editor.OrigamiEditorBootstrapper" documentBase="." width="1024" height="768">
				<param name="file" value="diagrams\paper_plane.xml" />
			</applet_desc>
		</create-jnlp>
	</target>

	<target name="run-browser-viewer" depends="default,just-run-browser-viewer" description="Builds and runs the applet in web browser. This task needs to have the JAR files signed." />

    <macrodef name="run-browser">
        <attribute name="file" description="The file to open in the browser." />
        <sequential>
        	<if>
				<available property="" file="${browserExecutable}" />
				<then>
					<exec executable="${browserExecutable}" dir=".">
						<arg value="@{file}" />
					</exec>
				</then>
				<else>
					<echo>Please create your ${browserExecutable} file to preview the applets in a web browser. Look in ${browserExecutable}.example for example contents of that file.</echo>
				</else>
			</if>
        </sequential>
    </macrodef>

	<macrodef name="run-appletviewer">
		<attribute name="file" description="The file to open in the appletviewer." />
		<sequential>
			<exec executable="appletviewer" dir=".">
				<arg value="-J-Djava.security.policy=java.policy.applet" />
				<arg value="@{file}" />
			</exec>
		</sequential>
	</macrodef>
	
    <macrodef name="run-jnlp">
        <attribute name="jnlp-file" description="The JNLP file to be run." />
        <sequential>
        	<killjava />
			<exec executable="javaws" dir=".">
				<arg value="@{jnlp-file}" />
			</exec>
			<delete>
				<fileset file="@{jnlp-file}" />
			</delete>
        </sequential>
    </macrodef>
	
	<target name="just-run-browser-viewer" description="Runs the applet in web browser. This task needs to have the JAR files signed.">
		<run-browser file="preview.html"/>
	</target>
	
	<target name="run-appletviewer-viewer" depends="default,just-run-appletviewer-viewer" description="Builds and runs the applet in appletviewer. This task doesn't need to have the JAR files signed." />

	<target name="just-run-appletviewer-viewer" description="Runs the applet in appletviewer. This task doesn't need to have the JAR files signed.">
		<run-appletviewer file="preview.html"/>
	</target>

	<target name="run-jnlp-viewer" depends="default,just-run-jnlp-viewer" description="Builds and runs the applet using JavaWS JNLP launcher. This task doesn't need to have the JAR files signed." />

	<target name="just-run-jnlp-viewer" depends="jnlp-viewer-test" description="Runs the applet using JavaWS JNLP launcher. This task doesn't need to have the JAR files signed.">
		<run-jnlp jnlp-file="origami_viewer.test.jnlp"/>
	</target>

	<target name="run-jnlp-editor" depends="default,just-run-jnlp-editor" description="Builds and runs the applet using JavaWS JNLP launcher. This task doesn't need to have the JAR files signed." />

	<target name="just-run-jnlp-editor" depends="jnlp-editor-test" description="Runs the applet using JavaWS JNLP launcher. This task doesn't need to have the JAR files signed.">
		<run-jnlp jnlp-file="origami_editor.test.jnlp"/>
	</target>

	<target name="run-browser-editor" depends="default,just-run-browser-editor" description="Builds and runs the applet in web browser. This task needs to have the JAR files signed." />

	<target name="just-run-browser-editor" description="Runs the applet in web browser. This task needs to have the JAR files signed.">
		<run-browser file="preview-editor.html"/>
	</target>

	<target name="run-appletviewer-editor" depends="default,just-run-appletviewer-editor" description="Builds and runs the applet in appletviewer. This task doesn't need to have the JAR files signed." />

	<target name="just-run-appletviewer-editor" description="Runs the applet in appletviewer. This task doesn't need to have the JAR files signed.">
		<run-appletviewer file="preview-editor.html"/>
	</target>

	<!--target name="javadoc">
        <javadoc access="public" additionalparam=" -docencoding &quot;UTF-8&quot; -charset &quot;UTF-8&quot;" author="true" 
        	classpath="lib/skinlf.jar;lib/forms-1.3.0.jar;lib/metadata-extractor-2.3.1.jar;lib/jvftp.jar" destdir="doc" 
        	doctitle="Thumbnailer" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" overview="E:\Programování\Java\Thumbnailer\overview.html" 
        	packagenames="javax.swing.origamist,cz.cuni.mff.peckam.java.thumbnailer.dialogs,cz.cuni.mff.peckam.java.thumbnailer,cz.cuni.mff.peckam.java.thumbnailer.graphics,cz.cuni.mff.peckam.java.thumbnailer.utils,cz.cuni.mff.peckam.java.thumbnailer.ftp,cz.cuni.mff.peckam.java.thumbnailer.configurations,cz.cuni.mff.peckam.java.thumbnailer.sql" 
        	source="1.6" sourcepath="src" splitindex="true" use="true" version="true"/>
    </target-->

	<target name="tests" depends="compile" description="Runs JUnit tests">
		<mkdir dir="tests/bin" />
		<javac srcdir="src" sourcepath="" destdir="tests/bin" debug="${debug}" includes="cz/cuni/mff/peckam/java/origamist/tests/*.java">
			<classpath>
				<pathelement path="bin" />
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
				<fileset file="lib-compile-time/junit.jar" />
				<fileset file="lib-compile-time/org.hamcrest.core*.jar" />
			</classpath>
		</javac>
		<junit>
			<classpath>
				<pathelement location="tests/bin" />
				<pathelement location="bin" />
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
				<fileset file="lib-compile-time/junit.jar" />
				<fileset file="lib-compile-time/org.hamcrest.core*.jar" />
			</classpath>
			<formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="tests/bin" includes="cz/cuni/mff/peckam/java/origamist/tests/**/*.class" />
			</batchtest>
		</junit>
		<delete dir="tests/bin" />
	</target>

	<target name="libs-sign" description="Signs the JAR libraries deployed along with the applet. This is needed because Java Plugin shows a warning if a signed applet uses unsigned libraries.">
		<if>
			<available property="" file="${signappletExecutable}" />
			<then>
				<foreach target="libs-sign-inner-foreach" param="file.to.sign">
					<path>
						<fileset dir="lib" includes="*.jar" />
					</path>
				</foreach>
			</then>
			<else>
				<echo>Please create your ${signappletExecutable} file to sign the libraries. Look in ${signappletExecutable}.example for example contents of that file.</echo>
			</else>
		</if>
	</target>

	<target name="libs-sign-inner-foreach">
		<exec executable="${signappletExecutable}" dir=".">
			<arg value="${file.to.sign}" />
		</exec>
	</target>

</project>